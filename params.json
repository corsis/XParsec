{"google":"","name":"XParsec","body":"**XParsec** can work with **any type**, supports **[domain-specific non-linear navigation](https://github.com/corsis/XParsec/blob/16de327b98410e3031636ffa86572e12d52f4594/XParsec.fsi#L88)** and is [**very easy to extend**](https://github.com/corsis/XParsec/blob/f6bc93499a588b287dc20f622fb917e1edac58b8/XParsec.fs#L111).\r\n\r\n(FParsec only works with `Char`s and can only go forward on a one dimensional string.)\r\n\r\n# Example\r\n\r\nBelow we use [`XParsec.Xml`](https://github.com/corsis/XParsec/blob/c79ce4ef4ec7401d1c0db8347fbfce6837078e44/XParsec.fsi#L61) â€“ the first XParsec extension [implemented in just 19 lines of F#](https://github.com/corsis/XParsec/blob/c79ce4ef4ec7401d1c0db8347fbfce6837078e44/XParsec.fs#L102).\r\n\r\n```fsharp\r\n  open XParsec\r\n  open XParsec.Xml\r\n\r\n  let show reply = printfn \"%A\" reply\r\n  let test parse = show << reply << parse << enter\r\n  let name (e:E) = string e.Name\r\n  //          ^\r\n  //         XElement\r\n\r\n  let root = E.Parse \"<root><a><b><c><d font='Arial'></d></c></b></a></root>\"\r\n\r\n  //             domain-specific\r\n  //                navigation\r\n  //                    v\r\n  let parser1 = many (child => name) .>. !@\"font\"\r\n  //             ^              ^\r\n  //         powerful        first-class\r\n  //        combinators     extensibility\r\n\r\n  // graceful choices\r\n  let parser2 = !*child >. !@\"font\"\r\n  let parser3 =  parent => name </> parser2\r\n\r\n  // graceful look-ahead\r\n  let parser4 = attempt parser1 .>. (current => name)\r\n\r\n  test parser1 root; test parser2 root; test parser3 root; test parser4 root\r\n```\r\n```fsharp\r\nS ([\"a\"; \"b\"; \"c\"; \"d\"], \"Arial\")\r\nS \"Arial\"\r\nS \"Arial\"\r\nS (([\"a\"; \"b\"; \"c\"; \"d\"], \"Arial\"), \"root\")\r\n```\r\n\r\n# Browse\r\n\r\n+ [Signatures](https://github.com/corsis/XParsec/blob/master/XParsec.fsi)\r\n+ [Implementation](https://github.com/corsis/XParsec/blob/master/XParsec.fs)\r\n\r\n# Contact\r\n\r\n[![corsis]](https://github.com/corsis/)\r\n\r\n[corsis]: http://portfusion.sourceforge.net/i/l100.png \"Corsis Research\"","tagline":"A stream-and-type-independent, non-linear, extensible parsec implementation in F# 3.0 - inspired by FParsec, freed from Chars and linear Streams and simplified.","note":"Don't delete this file! It's used internally to help with page regeneration."}