{"name":"XParsec","body":"**XParsec** can work with **any type**, supports **[domain-specific non-linear navigation](https://github.com/corsis/XParsec/blob/16de327b98410e3031636ffa86572e12d52f4594/XParsec.fsi#L88)** and is [**very easy to extend**](https://github.com/corsis/XParsec/blob/f6bc93499a588b287dc20f622fb917e1edac58b8/XParsec.fs#L111).\r\n\r\n(FParsec only works with `Char`s and can only go forward on a one dimensional string.)\r\n\r\n# Example\r\n\r\nBelow we use [`XParsec.Xml`](https://github.com/corsis/XParsec/blob/c07865bcebfdaeb6eeb008804aaf33c4dbb400c8/XParsec.fsi#L61) â€“ the first XParsec extension [implemented in just 19 lines of F#](https://github.com/corsis/XParsec/blob/c07865bcebfdaeb6eeb008804aaf33c4dbb400c8/XParsec.fs#L102).\r\n\r\n```fsharp\r\n  open XParsec\r\n  open XParsec.Xml\r\n\r\n  let show x          = printfn \"%A\" x\r\n  let test root parse = root |> enter |> parse |> show\r\n  let name (e : E)    = string e.Name\r\n  //            ^\r\n  //           XElement\r\n\r\n  let root1 = E.Parse \"<root><a><b><c><d font='Arial'></d></c></b></a></root>\"\r\n\r\n  //            navigation can be\r\n  //            domain-specific\r\n  //                  v\r\n  let parser1 = many (child|->name) .>. !@\"font\"\r\n  //            ^             ^\r\n  //       packed with      easy to\r\n  //       lots of          extend\r\n  //       combinators\r\n\r\n  // choices are handled with grace\r\n  let parser2 = many child >. !@\"font\"\r\n  let parser3 = parent|->name </> parser2\r\n\r\n  test root1 parser1; test root1 parser2; test root1 parser3\r\n```\r\n```fsharp\r\n(S ([\"a\"; \"b\"; \"c\"; \"d\"], \"Arial\"), XParsec+Source`2[XElement,XElement])\r\n(S \"Arial\", XParsec+Source`2[XElement,XElement])\r\n(S \"Arial\", XParsec+Source`2[XElement,XElement])\r\n```\r\n\r\n# Browse\r\n\r\n+ [Signatures](https://github.com/corsis/XParsec/blob/master/XParsec.fsi)\r\n+ [Implementation](https://github.com/corsis/XParsec/blob/master/XParsec.fs)\r\n\r\n# Contact\r\n\r\n[![corsis]](https://github.com/corsis/)\r\n\r\n[corsis]: http://portfusion.sourceforge.net/i/l100.png \"Corsis Research\"","google":"","tagline":"A stream-and-type-independent non-linear parsec implementation in F# 3.0 - inspired by FParsec, freed from Chars and linear Streams and simplified.","note":"Don't delete this file! It's used internally to help with page regeneration."}