{"name":"XParsec","body":"**XParsec** works with **[any type](https://github.com/corsis/XParsec/blob/master/XParsec.fsi#L26)**, is **[very easy to extend](https://github.com/corsis/XParsec/blob/master/XParsec.fs#L102)**, supports **[domain-specific non-linear navigation](https://github.com/corsis/XParsec/blob/master/XParsec.fsi#L88)** and is implemented in just 50 source lines of code.\r\n\r\n(FParsec only works with `Char`s and can only go forward on a one dimensional `String`.)\r\n\r\n# Example 1\r\n\r\nHere we use [`XParsec.Xml`](https://github.com/corsis/XParsec/blob/master/XParsec.fsi#L61) which provides the first XParsec extension. It is implemented in just 14 source lines of code for the examples used below.\r\n\r\n```fsharp\r\n  open XParsec\r\n  open XParsec.Xml\r\n\r\n  let test parse = printfn \"%A\" << reply << parse << enter\r\n  let name (e:E) = string e.Name                              // E = XElement\r\n\r\n  let root = E.Parse \"<root><a><b><c><d font='Arial'></d></c></b></a></root>\"\r\n\r\n  //             domain-specific\r\n  //                navigation\r\n  //                    v\r\n  let parser1 = many (child => name) .>. !@\"font\"\r\n  //             ^              ^\r\n  //         powerful        first-class\r\n  //        combinators     extensibility\r\n\r\n  // graceful choices\r\n  let parser2 = (parent => name) </> (!*child >. !@\"font\")\r\n\r\n  // graceful non-linear look-ahead (here = down in Xml)\r\n  let parser3 = attempt parser1 .>. (current => name)\r\n\r\n  // brand-new non-linear look-back (here = up   in Xml)\r\n  let S d,_   = enter root |> (!*child >. current)\r\n  let parser4 = (attempt <| many (parent => name)) .>. (current => name)\r\n\r\n  test parser1 root; test parser2 root; test parser3 root; test parser4 d\r\n```\r\n```fsharp\r\nS ([\"a\"; \"b\"; \"c\"; \"d\"], \"Arial\")\r\nS \"Arial\"\r\nS (([\"a\"; \"b\"; \"c\"; \"d\"], \"Arial\"), \"root\")\r\nS ([\"c\"; \"b\"; \"a\"; \"root\"], \"d\")\r\n```\r\n\r\n# Example 2\r\n\r\nRecursion &ndash; handled with ease.\r\n\r\n```fsharp\r\nopen XParsec\r\nopen XParsec.Xml\r\n\r\ntype Xobj = I of int | L of Xobj list\r\n\r\nlet main _ =\r\n\r\n  let root = E.Parse \"<list><int v='1'/><list><int v='2'/></list><int v='3'/></list>\"\r\n\r\n  let (!<>) n =  current ?> fun (e:E) -> (e.Name = !> n) ?-> e\r\n  let all   p = (current >. p) .>. many (next >. p) => function c,cs -> c::cs\r\n\r\n  let e,e'    = future ()\r\n\r\n  let int_    = !<>\"int\"  >. !@\"v\" => (Int32.Parse >> I)\r\n  let list    = !<>\"list\" >. child >. all e .> parent => L\r\n\r\n  do  e'     := int_ </> list\r\n\r\n  test e root\r\n```\r\n```fsharp\r\nS (L [I 1; L [I 2]; I 3])\r\n```\r\n\r\nIt is important to note that you are in full control of navigation at all times!\r\n\r\n```fsharp\r\n  let list    = !<>\"list\" >. child >. all e => L\r\n```\r\n```fsharp\r\nS (L [I 1; L [I 2])\r\n```\r\n\r\n# Browse\r\n\r\n+ [Signatures](https://github.com/corsis/XParsec/blob/master/XParsec.fsi#slider)\r\n+ [Implementation](https://github.com/corsis/XParsec/blob/master/XParsec.fs#slider)\r\n\r\n# License\r\n\r\n```\r\nCopyright (c) 2012, Cetin Sert\r\n\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are\r\nmet:\r\n\r\n    * Redistributions of source code must retain the above copyright\r\n      notice, this list of conditions and the following disclaimer.\r\n\r\n    * Redistributions in binary form must reproduce the above\r\n      copyright notice, this list of conditions and the following\r\n      disclaimer in the documentation and/or other materials provided\r\n      with the distribution.\r\n\r\n    * The names of contributors may not be used to endorse or promote\r\n      products derived from this software without specific prior\r\n      written permission. \r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n```\r\n\r\n# Contact\r\n\r\n[![corsis]](https://github.com/corsis/)\r\n\r\n[cetin@corsis.eu](mailto:fusion@corsis.eu)\r\n\r\n[corsis]: http://portfusion.sourceforge.net/i/l100.png \"Corsis Research\"","google":"","tagline":"extensible, type-and-source-polymorphic, non-linear applicative parser combinator library for F# 3.0","note":"Don't delete this file! It's used internally to help with page regeneration."}